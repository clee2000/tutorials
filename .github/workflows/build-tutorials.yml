name: Build tutorials

on:
  pull_request:
  push:
    branches:
      - main

jobs:
  worker:
    name: pytorch_tutorial_build_worker
    strategy:
      matrix:
        include:
          - { shard: 1, num_shards: 2, runner: "linux.4xlarge.nvidia.gpu" }
          - { shard: 2, num_shards: 2, runner: "linux.4xlarge.nvidia.gpu" }
    runs-on: ${{ matrix.runner }}
    env:
      DOCKER_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-bionic-cuda11.7-cudnn8-py3-gcc7"
      CUDA_VERSION: "9"
    steps:
      - name: Checkout Tutorials
        uses: actions/checkout@v3

      - name: Set Up CI Environment
        shell: bash
        run: |
          set -e

          sudo apt-get -y update
          sudo apt-get -y install expect-dev moreutils

          sudo pip3 -q install awscli==1.16.35

          if [ -n "${CUDA_VERSION}" ]; then
            nvidia-smi
          fi

          # This IAM user only allows read-write access to ECR
          export AWS_ACCESS_KEY_ID=${CIRCLECI_AWS_ACCESS_KEY_FOR_ECR_READ_ONLY}
          export AWS_SECRET_ACCESS_KEY=${CIRCLECI_AWS_SECRET_KEY_FOR_ECR_READ_ONLY}
          eval $(aws ecr get-login --region us-east-1 --no-include-email)

      - name: Build
        shell: bash
        env:
          WORKER: 1
          AWS_ACCESS_KEY_ID: ${{  }}
        run: |
          set -e

          # for some reason, pip installs it in a different place than what is looked at in the py file
          sudo pip3 install requests --target=/opt/circleci/.pyenv/versions/3.9.4/lib/python3.9/site-packages
          export pyTorchDockerImageTag=$(python3 .jenkins/get_docker_tag.py)
          echo "PyTorchDockerImageTag: "${pyTorchDockerImageTag}

          cat >/home/circleci/project/ci_build_script.sh \<<EOL
          # =================== The following code will be executed inside Docker container ===================
          set -ex

          .jenkins/build.sh
          # =================== The above code will be executed inside Docker container ===================
          EOL
          chmod +x /home/circleci/project/ci_build_script.sh

          export DOCKER_IMAGE=${DOCKER_IMAGE}:${pyTorchDockerImageTag}
          echo "DOCKER_IMAGE: "${DOCKER_IMAGE}
          docker pull ${DOCKER_IMAGE} >/dev/null
          if [ -n "${CUDA_VERSION}" ]; then
            export id=$(docker run --gpus all -t -d -w /var/lib/jenkins ${DOCKER_IMAGE})
          else
            export id=$(docker run -t -d -w /var/lib/jenkins ${DOCKER_IMAGE})
          fi

          echo "declare -x COMMIT_ID=${GITHUB_SHA}" >> /home/circleci/project/env
          echo "declare -x COMMIT_SOURCE=${GITHUB_REF}" >> /home/circleci/project/env
          # DANGER! DO NOT REMOVE THE `set +x` SETTING HERE!
          set +x
          if [[ "$GITHUB_REF" == master || "$GITHUB_REF" == main ]]; then
            if [ -z "${CIRCLECI_AWS_ACCESS_KEY_FOR_PYTORCH_TUTORIAL_BUILD_MASTER_S3_BUCKET}" ]; then exit 1; fi
            if [ -z "${CIRCLECI_AWS_SECRET_KEY_FOR_PYTORCH_TUTORIAL_BUILD_MASTER_S3_BUCKET}" ]; then exit 1; fi
            if [ -z "${GITHUB_PYTORCHBOT_USERNAME}" ]; then exit 1; fi
            if [ -z "${GITHUB_PYTORCHBOT_TOKEN}" ]; then exit 1; fi

            echo "declare -x AWS_ACCESS_KEY_ID=${CIRCLECI_AWS_ACCESS_KEY_FOR_PYTORCH_TUTORIAL_BUILD_MASTER_S3_BUCKET}" >> /home/circleci/project/env
            echo "declare -x AWS_SECRET_ACCESS_KEY=${CIRCLECI_AWS_SECRET_KEY_FOR_PYTORCH_TUTORIAL_BUILD_MASTER_S3_BUCKET}" >> /home/circleci/project/env
            echo "declare -x GITHUB_PYTORCHBOT_USERNAME=${GITHUB_PYTORCHBOT_USERNAME}" >> /home/circleci/project/env
            echo "declare -x GITHUB_PYTORCHBOT_TOKEN=${GITHUB_PYTORCHBOT_TOKEN}" >> /home/circleci/project/env
          else
            echo "declare -x AWS_ACCESS_KEY_ID=${CIRCLECI_AWS_ACCESS_KEY_FOR_PYTORCH_TUTORIAL_BUILD_PR_S3_BUCKET}" >> /home/circleci/project/env
            echo "declare -x AWS_SECRET_ACCESS_KEY=${CIRCLECI_AWS_SECRET_KEY_FOR_PYTORCH_TUTORIAL_BUILD_PR_S3_BUCKET}" >> /home/circleci/project/env
          fi
          set -x

          echo 'rm /opt/cache/bin/*' | docker exec -u root -i "$id" bash
          docker cp /home/circleci/project/. "$id:/var/lib/jenkins/workspace"

          export COMMAND='((echo "source ./workspace/env" && echo "sudo chown -R jenkins workspace && cd workspace && ./ci_build_script.sh") | docker exec -u jenkins -i "$id" bash) 2>&1'
          echo ${COMMAND} > ./command.sh && unbuffer bash ./command.sh | ts

  manager:
    name: pytorch_tutorial_build_manager
    needs: pytorch_tutorial_build_worker
    runs-on: [self-hosted, linux.large]
    steps:
      - name: Checkout Tutorials
        uses: actions/checkout@v3

      - name:
